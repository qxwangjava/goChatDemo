// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.5
// source: pkg/proto/im.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CloseConnReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType int32  `protobuf:"varint,1,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CloseConnReq) Reset() {
	*x = CloseConnReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_im_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseConnReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConnReq) ProtoMessage() {}

func (x *CloseConnReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_im_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseConnReq.ProtoReflect.Descriptor instead.
func (*CloseConnReq) Descriptor() ([]byte, []int) {
	return file_pkg_proto_im_proto_rawDescGZIP(), []int{0}
}

func (x *CloseConnReq) GetDeviceType() int32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *CloseConnReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CloseConnRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseConnRsp) Reset() {
	*x = CloseConnRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_im_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseConnRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseConnRsp) ProtoMessage() {}

func (x *CloseConnRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_im_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseConnRsp.ProtoReflect.Descriptor instead.
func (*CloseConnRsp) Descriptor() ([]byte, []int) {
	return file_pkg_proto_im_proto_rawDescGZIP(), []int{1}
}

type SendMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`                 // 用户ID
	DeviceType     int32  `protobuf:"varint,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`        //设备类型
	MessageType    int32  `protobuf:"varint,3,opt,name=messageType,proto3" json:"messageType,omitempty"`      // type 消息类型，默认是 1 - text 2-image
	MessageContent string `protobuf:"bytes,4,opt,name=messageContent,proto3" json:"messageContent,omitempty"` // 消息内容
}

func (x *SendMsgReq) Reset() {
	*x = SendMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_im_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgReq) ProtoMessage() {}

func (x *SendMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_im_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgReq.ProtoReflect.Descriptor instead.
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return file_pkg_proto_im_proto_rawDescGZIP(), []int{2}
}

func (x *SendMsgReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendMsgReq) GetDeviceType() int32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *SendMsgReq) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *SendMsgReq) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

type SendMsgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendMsgRsp) Reset() {
	*x = SendMsgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_im_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgRsp) ProtoMessage() {}

func (x *SendMsgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_im_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgRsp.ProtoReflect.Descriptor instead.
func (*SendMsgRsp) Descriptor() ([]byte, []int) {
	return file_pkg_proto_im_proto_rawDescGZIP(), []int{3}
}

var File_pkg_proto_im_proto protoreflect.FileDescriptor

var file_pkg_proto_im_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x22, 0x46, 0x0a, 0x0c, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70,
	0x32, 0x6e, 0x0a, 0x08, 0x49, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x0f, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_im_proto_rawDescOnce sync.Once
	file_pkg_proto_im_proto_rawDescData = file_pkg_proto_im_proto_rawDesc
)

func file_pkg_proto_im_proto_rawDescGZIP() []byte {
	file_pkg_proto_im_proto_rawDescOnce.Do(func() {
		file_pkg_proto_im_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_im_proto_rawDescData)
	})
	return file_pkg_proto_im_proto_rawDescData
}

var file_pkg_proto_im_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_proto_im_proto_goTypes = []interface{}{
	(*CloseConnReq)(nil), // 0: rpc.closeConnReq
	(*CloseConnRsp)(nil), // 1: rpc.closeConnRsp
	(*SendMsgReq)(nil),   // 2: rpc.sendMsgReq
	(*SendMsgRsp)(nil),   // 3: rpc.sendMsgRsp
}
var file_pkg_proto_im_proto_depIdxs = []int32{
	0, // 0: rpc.ImServer.closeConn:input_type -> rpc.closeConnReq
	2, // 1: rpc.ImServer.sendMsg:input_type -> rpc.sendMsgReq
	1, // 2: rpc.ImServer.closeConn:output_type -> rpc.closeConnRsp
	3, // 3: rpc.ImServer.sendMsg:output_type -> rpc.sendMsgRsp
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_proto_im_proto_init() }
func file_pkg_proto_im_proto_init() {
	if File_pkg_proto_im_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_im_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseConnReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_im_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseConnRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_im_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_im_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_im_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_im_proto_goTypes,
		DependencyIndexes: file_pkg_proto_im_proto_depIdxs,
		MessageInfos:      file_pkg_proto_im_proto_msgTypes,
	}.Build()
	File_pkg_proto_im_proto = out.File
	file_pkg_proto_im_proto_rawDesc = nil
	file_pkg_proto_im_proto_goTypes = nil
	file_pkg_proto_im_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImServerClient is the client API for ImServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImServerClient interface {
	// 关闭连接
	CloseConn(ctx context.Context, in *CloseConnReq, opts ...grpc.CallOption) (*CloseConnRsp, error)
	// 发送消息
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgRsp, error)
}

type imServerClient struct {
	cc grpc.ClientConnInterface
}

func NewImServerClient(cc grpc.ClientConnInterface) ImServerClient {
	return &imServerClient{cc}
}

func (c *imServerClient) CloseConn(ctx context.Context, in *CloseConnReq, opts ...grpc.CallOption) (*CloseConnRsp, error) {
	out := new(CloseConnRsp)
	err := c.cc.Invoke(ctx, "/rpc.ImServer/closeConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imServerClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgRsp, error) {
	out := new(SendMsgRsp)
	err := c.cc.Invoke(ctx, "/rpc.ImServer/sendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImServerServer is the server API for ImServer service.
type ImServerServer interface {
	// 关闭连接
	CloseConn(context.Context, *CloseConnReq) (*CloseConnRsp, error)
	// 发送消息
	SendMsg(context.Context, *SendMsgReq) (*SendMsgRsp, error)
}

// UnimplementedImServerServer can be embedded to have forward compatible implementations.
type UnimplementedImServerServer struct {
}

func (*UnimplementedImServerServer) CloseConn(context.Context, *CloseConnReq) (*CloseConnRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConn not implemented")
}
func (*UnimplementedImServerServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}

func RegisterImServerServer(s *grpc.Server, srv ImServerServer) {
	s.RegisterService(&_ImServer_serviceDesc, srv)
}

func _ImServer_CloseConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).CloseConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ImServer/CloseConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).CloseConn(ctx, req.(*CloseConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImServer_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ImServer/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ImServer",
	HandlerType: (*ImServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "closeConn",
			Handler:    _ImServer_CloseConn_Handler,
		},
		{
			MethodName: "sendMsg",
			Handler:    _ImServer_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/im.proto",
}
